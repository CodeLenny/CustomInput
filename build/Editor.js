// Generated by CoffeeScript 1.8.0
(function() {
  define(["jquery", "CustomInput/types/InputType", "CustomInput/util/InputTypeList"], function($, InputType, InputTypeList) {
    var Editor;
    Editor = (function() {
      function Editor(ci) {
        var _base;
        this.main = ci;
        if ((_base = this.main).fontAwesomeAdded == null) {
          _base.fontAwesomeAdded = false;
        }
        this.currentField = null;
      }

      Editor.prototype.addFontAwesome = function() {
        $("<link />").attr({
          rel: "stylesheet",
          href: "//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"
        });
        return this.main.fontAwesomeAdded = true;
      };

      Editor.prototype.appendToInsertMenu = function(types) {
        var container, header, icon, iconHolder, item, label, letter, menu, type, typeObj, x, _i, _len, _results;
        if (!this.main.fontAwesomeAdded) {
          this.addFontAwesome();
        }
        menu = $("#\\:8q").parent();
        $("#\\:8q " + this.main.prefix + "insertMenu").remove();
        $("#\\:8q [id^='\\:" + this.main.prefix + "insert']").remove();
        header = $("<div />").text(this.main.name).addClass("goog-menuheader goog-menuheader-disabled").attr({
          id: ":" + this.main.prefix + "insertMenu",
          "aria-disabled": "true",
          style: "-webkit-user-select: none;"
        });
        menu.append(header);
        _results = [];
        for (x = _i = 0, _len = types.length; _i < _len; x = ++_i) {
          typeObj = types[x];
          type = new typeObj();
          item = $("<div />").addClass("goog-menuitem apps-menuitem").attr({
            id: ":" + this.main.prefix + "insert" + x,
            role: "menuitem",
            style: "-webkit-user-select: none;"
          });
          container = $("<div />").addClass("google-menuitem-content").css("-webkit-user-select", "none");
          iconHolder = $("<div />").addClass("docs-icon goog-inline-block goog-menuitem-icon").css("-webkit-user-select", "none").attr({
            "aria-hidden": true
          });
          icon = $("<div />").addClass("docs-icon-img-container docs-icon-img fa fa-" + (type.displayIcon())).css("-webkit-user-select", "none");
          container.append(iconHolder.append(icon));
          label = $("<span />").addClass("google-menuitem-label").css("-webkit-user-select", "none").text(type.displayName().substr(1)).attr({
            "aria-label": type.displayName()
          });
          letter = $("<span />").addClass("goog-menuitem-mnemonic-hint").css("-webkit-user-select", "none").text(type.displayName().substr(0, 1));
          _results.push(menu.append(item.append(container.append(label.prepend(letter)))));
        }
        return _results;
      };

      Editor.prototype.onQuestionTypeDropdown = function(cb) {
        var currentMenuElement, dropdownHolder, menu, menuElement;
        $("body").on("mousedown", ".ss-formwidget-container", function() {});
        dropdownHolder = $("[id$='fw_tdd']");
        currentMenuElement = dropdownHolder.attr("aria-activedescendant");
        menuElement = $("[id='" + currentMenuElement + "']");
        if (menuElement.parents(".goog-menu").length > 0) {
          menu = menuElement.parent();
          return cb(menu);
        }
      };

      Editor.prototype.appendToFieldTypeMenu = function(menu, types) {
        var item, text, type, typeObj, x, _i, _len, _results;
        if (!this.main.fontAwesomeAdded) {
          this.addFontAwesome();
        }
        _results = [];
        for (x = _i = 0, _len = types.length; _i < _len; x = ++_i) {
          typeObj = types[x];
          type = new typeObj();
          item = $("<div />").addClass("goog-menuitem").css("-webkit-user-select", "none").attr({
            id: ":" + this.main.prefix + "menuItem" + x,
            role: "menuitem"
          });
          text = $("<div />").addClass("goog-menuitem-content").css("-webkit-user-select", "none").text(type.displayName());
          _results.push(menu.append(item.append(text)));
        }
        return _results;
      };

      Editor.prototype.onFieldSelect = function(cb) {
        return $("body").on("mousedown", ".ss-formwidget-container", (function(_this) {
          return function() {
            if (!_this.currentField || _this.currentField !== _this.getCurrentFieldPosition()) {
              _this.currentField = _this.getCurrentFieldPosition();
              return cb();
            }
          };
        })(this));
      };

      Editor.prototype.getCurrentFieldPosition = function() {
        var allFields, current;
        allFields = $(".ss-formwidget-container");
        current = this.getCurrentField();
        return allFields.index(current);
      };

      Editor.prototype.getCurrentField = function() {
        return $(".ss-formwidget-container-editor");
      };

      return Editor;

    })();
    return Editor;
  });

}).call(this);
